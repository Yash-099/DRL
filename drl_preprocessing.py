import numpy
import glob
import csv
d_min = 1
# X = [a7,a6,a5,a4,a3,a2,a1,a0]
# Y = [b7,b6,b5,b4,b3,b2,b1,b0]
# Z = [c7,c6,c5,c4,c3,c2,c1,c0]
# 
frame_x = [-8,-7,-5,-3,0,3,6,7]
frame_y = [5,5,5.5,4,2.5,3,4,4]
              
frame_z = [6.5,6.5,6.5,6.5,6.5,6.5,6.5,6.5]


coeffx = [[-7.860746644790878 , 0.4529713142950088 , 0.450146918965013 , 0.052435174548558866 , -0.10616963787497664 , -0.0019000262997296235 , 0.01676936370084189 , -0.0035064625438380403 , ],[
-5.865619363874316 , 1.011703074667031 , -0.17842130302449563 , -0.005794337931611188 , 0.04683188382701741 , -0.006620830617965444 , -0.0027912169282050467 , 0.0007120938825456206 , ],[
-4.153192590846786 , 0.9742919591657776 , 0.17099018684948322 , 0.02494492159701369 , -0.018723603013802652 , 0.0009441811284241854 , 0.0009260070111063287 , -0.0001810618912154241 , ],[
-1.554160821383733 , 1.532069973462491 , 0.05166001124637433 , -0.0332032195077585 , 0.002688274568806685 , 0.0011112515029884087 , -0.00018746443144830772 , 2.199454227904747e-05 , ],[
1.5203074403176655 , 1.4885247229006848 , -0.025947583039894886 , 0.012415911816639811 , 0.006051635559796755 , -0.0008866361170286043 , -0.00041149283756741235 , -5.399860029606242e-05 , ],[
4.528535926862342 , 1.5562981765474293 , -0.003040908879302804 , -0.05546755255762413 , -0.027376937942344404 , -0.0012122529896545359 , 0.001881919959305134 , 0.00038162899984928335 , ],[
6.874830329509381 , 0.41771681343462463 , -0.4419472989690808 , 0.09152991924293322 , 0.07995551119829114 , -0.006762180578009107 , -0.01283854173859024 , -0.0024845520995486225]]


coeffy = [ [4.982700535844465 , -0.04185135109443433 , -0.006057019364923644 , 0.04989536554433057 , 0.02860587938155254 , -0.009643229620253562 , -0.005249395861095449 , 0.0015992151703573218 , ],[
5.289482753213913 , 0.3690671255340542 , -0.025060484813554246 , -0.13178959670323429 , -0.01546989090133102 , 0.013422112287813433 , 0.0010476225009728426 , -0.0006996411186332799 , ],[
5.033674731636648 , -0.8382799289559381 , -0.3082360791834778 , 0.09682270122706285 , 0.025375428725245442 , -0.008976455721274004 , -0.0008140811784150883 , 0.00043368345014928983 , ],[
3.0202348023581322 , -0.782283460258507 , 0.245203284931978 , 0.029300194662598762 , -0.015880084203254406 , 0.003237509318691889 , 0.00044199691314383816 , -0.00025424372278372884 , ],[
2.516631042664271 , 0.2753266343927551 , 0.24429370036201628 , -0.022925342549393553 , -0.011201676284907928 , -0.002631955044070452 , 0.00027693325861990873 , 0.00023066320070888176 , ],[
3.6442172188469173 , 0.5604268506721307 , -0.16459152487026013 , -0.06667988834470784 , 0.021336817460677057 , 0.006660764401279379 , -0.0009625114373341272 , -0.0004077267287023155 , ],[
4.01559312721299 , -0.038836984344015925 , 0.008534962124430747 , 0.04354335026593483 , -0.028542787882416924 , -0.005882265505239684 , 0.004414698544995119 , 0.0011758995833207795]]
   
coeffz =[[6.5 , 0.0 , 0.0 , 0.0 , -0.0 , 0.0 , 0.0 , -0.0 , ],[
6.5 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , ],[
6.5 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , ],[
6.5 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , ],[
6.5 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , ],[
6.5 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , ],[
6.5 , 0.0 , 0.0 , 0.0 , 0.0 , -0.0 , 0.0 , 0.0]]
  
X = coeffx[0]
Y = coeffy[0]
Z = coeffz[0]

n=1



###### posedata_min_snap_/time_stamp.txt
K = glob.glob('data_min_snap/*.txt')##### path
with open('data.csv', 'w', newline='') as file:
	writer = csv.writer(file)
	for i in K:
		f = open(i, "r")
		x = float(f.readline())
		y = float(f.readline())
		z = float(f.readline())
		v = float(f.readline())

		#### finding time at which we get min distance from snap traj
		vx = [7*a7,6*a6,5*a5,4*a4,3*a3,2*a2,a1]
		vy = [7*b7,6*b6,5*b5,4*b4,3*b3,2*b2,b1]
		vz = [7*c7,6*c6,5*c5,4*c4,3*c3,2*c2,c1]
		X_new = X
		X_new[7] = X_new[7] - x

		Y_new = Y
		Y_new[7] = Y_new[7] - y

		Z_new = Z
		Z_new[7] = Z_new[7] - z
		Fx = np.polymul(X_new, vx)
		Fy = np.polymul(Y_new, vy)
		Fz = np.polymul(Z_new, vz)

		t = np.roots(Fx+Fy+Fz)
		t_real = t[np.isreal(t)]
		t_real = t_real[t_real>0]
		t_optim = t_real[0]
		dis_min = 100000
		for j in t_real:
			dist = np.polyval(np.polymul(X_new,X_new) + np.polymul(Y_new,Y_new)+ np.polymul(Z_new,Z_new),j)
			if dist<dis_min:
				t_optim = j
				dis_min = dist
		v_label = np.sqrt(np.polyval(np.polymul(vx,vx) + np.polymul(vy,vy) + np.polymul(vz,vz),t_optim))

		####### finding pg
		distance_poly = np.polymul(X_new,X_new)+ np.polymul(Y_new,Y_new)+ np.polymul(Z_new,Z_new)
		distance_poly_new = distance_poly

		for j in range(len(frame_x)):
			if x>frame_x[j]:
				X = coeffx[n]
				Y = coeffy[n]
				Z = coeffz[n]
				n=n+1
				break
		s_last = np.sqrt((frame_x[j-1]-x)**2 + (frame_y[j-1]-y)**2 + (frame_z[j-1]-z)**2)
		s_next = np.sqrt((frame_x[j]-x)**2 + (frame_y[j]-y)**2 + (frame_z[j]-z)**2)


		d = max(d_min,min(s_last,s_next))
		distance_poly_new[len(distance_poly_new)-1] = distance_poly_new[len(distance_poly_new)-1] - d**2

		t = np.roots(distance_poly_new)
		t_real = t[np.isreal(t)]
		t_real = t_real[t_real>0]

		t_optim = np.max(t_real)
		x_label = np.polyval(X_new,t_optim)
		y_label = np.polyval(Y_new,t_optim)
		z_label = np.polyval(Z_new,t_optim)
		mag = np.sqrt(x_label**2 + y_label**2 + z_label**2)
		x_label = x_label/mag
		y_label = y_label/mag
		z_label = z_label/mag
		filename = i.split('/')
		writer.writerow([filename[1][:len(filename[1])-4], x_label,y_label,v_label])





